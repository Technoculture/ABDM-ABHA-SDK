# coding: utf-8

"""
    Gateway

    Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing 

    The version of the OpenAPI document: 0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CertificateOrKeyGetSchema(BaseModel):
    """
    CertificateOrKeyGetSchema
    """ # noqa: E501
    e: Optional[StrictStr] = None
    kid: Optional[StrictStr] = None
    kty: Optional[StrictStr] = None
    n: Optional[StrictStr] = None
    use: Optional[StrictStr] = None
    x5c: Optional[List[StrictStr]] = None
    x5t: Optional[StrictStr] = None
    x5t_s256: Optional[StrictStr] = Field(default=None, alias="x5t#S256")
    alg: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["e", "kid", "kty", "n", "use", "x5c", "x5t", "x5t#S256", "alg"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateOrKeyGetSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateOrKeyGetSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "e": obj.get("e"),
            "kid": obj.get("kid"),
            "kty": obj.get("kty"),
            "n": obj.get("n"),
            "use": obj.get("use"),
            "x5c": obj.get("x5c"),
            "x5t": obj.get("x5t"),
            "x5t#S256": obj.get("x5t#S256"),
            "alg": obj.get("alg")
        })
        return _obj


