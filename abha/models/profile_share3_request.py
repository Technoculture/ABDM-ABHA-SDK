# coding: utf-8

"""
    Abdm Abha

    Abdm SDK for abha

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from abha.models.abdm_profile_share1_request_meta_data import AbdmProfileShare1RequestMetaData
from abha.models.profile_share3_request_intent import ProfileShare3RequestIntent
from typing import Optional, Set
from typing_extensions import Self

class ProfileShare3Request(BaseModel):
    """
    ProfileShare3Request
    """ # noqa: E501
    abha_address: StrictStr = Field(alias="abhaAddress")
    abha_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="abhaNumber")
    name: Optional[StrictStr] = None
    gender: Optional[StrictStr] = None
    year_of_birth: Optional[StrictInt] = Field(default=None, alias="yearOfBirth")
    address: Optional[StrictStr] = None
    district: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    intent: ProfileShare3RequestIntent
    meta_data: Optional[AbdmProfileShare1RequestMetaData] = Field(alias="metaData")
    __properties: ClassVar[List[str]] = ["abhaAddress", "abhaNumber", "name", "gender", "yearOfBirth", "address", "district", "state", "intent", "metaData"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['D Do not want to disclose', 'F Female', 'M Male', 'O Others']):
            raise ValueError("must be one of enum values ('D Do not want to disclose', 'F Female', 'M Male', 'O Others')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfileShare3Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of intent
        if self.intent:
            _dict['intent'] = self.intent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meta_data
        if self.meta_data:
            _dict['metaData'] = self.meta_data.to_dict()
        # set to None if meta_data (nullable) is None
        # and model_fields_set contains the field
        if self.meta_data is None and "meta_data" in self.model_fields_set:
            _dict['metaData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfileShare3Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "abhaAddress": obj.get("abhaAddress"),
            "abhaNumber": obj.get("abhaNumber"),
            "name": obj.get("name"),
            "gender": obj.get("gender"),
            "yearOfBirth": obj.get("yearOfBirth"),
            "address": obj.get("address"),
            "district": obj.get("district"),
            "state": obj.get("state"),
            "intent": ProfileShare3RequestIntent.from_dict(obj["intent"]) if obj.get("intent") is not None else None,
            "metaData": AbdmProfileShare1RequestMetaData.from_dict(obj["metaData"]) if obj.get("metaData") is not None else None
        })
        return _obj


