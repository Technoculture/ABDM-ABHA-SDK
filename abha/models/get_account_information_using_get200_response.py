# coding: utf-8

"""
Abdm Abha

Abdm SDK for abha

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class GetAccountInformationUsingGET200Response(BaseModel):
    """
    GetAccountInformationUsingGET200Response
    """  # noqa: E501

    address: Optional[StrictStr] = None
    auth_methods: Optional[List[StrictStr]] = Field(
        default=None, description="Based on authMethods", alias="authMethods"
    )
    day_of_birth: Optional[StrictStr] = Field(default=None, alias="dayOfBirth")
    district_code: Optional[StrictStr] = Field(default=None, alias="districtCode")
    district_name: Optional[StrictStr] = Field(default=None, alias="districtName")
    email: Optional[StrictStr] = None
    email_verified: Optional[StrictBool] = Field(default=None, alias="emailVerified")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    gender: Optional[StrictStr] = None
    health_id: Optional[StrictStr] = Field(default=None, alias="healthId")
    health_id_number: Optional[StrictStr] = Field(default=None, alias="healthIdNumber")
    kyc_photo: Optional[StrictStr] = Field(
        default=None, description="Encoded with Base 64", alias="kycPhoto"
    )
    kyc_verified: Optional[StrictBool] = Field(default=None, alias="kycVerified")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    middle_name: Optional[StrictStr] = Field(default=None, alias="middleName")
    mobile: Optional[StrictStr] = None
    month_of_birth: Optional[StrictStr] = Field(default=None, alias="monthOfBirth")
    name: Optional[StrictStr] = None
    new: Optional[StrictBool] = None
    phr_address: Optional[List[StrictStr]] = Field(default=None, alias="phrAddress")
    pincode: Optional[StrictStr] = None
    profile_photo: Optional[StrictStr] = Field(
        default=None, description="Encoded with Base 64", alias="profilePhoto"
    )
    state_code: Optional[StrictStr] = Field(default=None, alias="stateCode")
    state_name: Optional[StrictStr] = Field(default=None, alias="stateName")
    sub_district_code: Optional[StrictStr] = Field(
        default=None, alias="subDistrictCode"
    )
    subdistrict_name: Optional[StrictStr] = Field(default=None, alias="subdistrictName")
    tags: Optional[Dict[str, StrictStr]] = None
    town_code: Optional[StrictStr] = Field(default=None, alias="townCode")
    town_name: Optional[StrictStr] = Field(default=None, alias="townName")
    verification_status: Optional[StrictStr] = Field(
        default=None, alias="verificationStatus"
    )
    verification_type: Optional[StrictStr] = Field(
        default=None, alias="verificationType"
    )
    village_code: Optional[StrictStr] = Field(default=None, alias="villageCode")
    village_name: Optional[StrictStr] = Field(default=None, alias="villageName")
    ward_code: Optional[StrictStr] = Field(default=None, alias="wardCode")
    ward_name: Optional[StrictStr] = Field(default=None, alias="wardName")
    year_of_birth: Optional[StrictStr] = Field(default=None, alias="yearOfBirth")
    __properties: ClassVar[List[str]] = [
        "address",
        "authMethods",
        "dayOfBirth",
        "districtCode",
        "districtName",
        "email",
        "emailVerified",
        "firstName",
        "gender",
        "healthId",
        "healthIdNumber",
        "kycPhoto",
        "kycVerified",
        "lastName",
        "middleName",
        "mobile",
        "monthOfBirth",
        "name",
        "new",
        "phrAddress",
        "pincode",
        "profilePhoto",
        "stateCode",
        "stateName",
        "subDistrictCode",
        "subdistrictName",
        "tags",
        "townCode",
        "townName",
        "verificationStatus",
        "verificationType",
        "villageCode",
        "villageName",
        "wardCode",
        "wardName",
        "yearOfBirth",
    ]

    @field_validator("auth_methods")
    def auth_methods_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(
                ["AADHAAR_OTP", "MOBILE_OTP", "PASSWORD", "DEMOGRAPHICS", "AADHAAR_BIO"]
            ):
                raise ValueError(
                    "each list item must be one of ('AADHAAR_OTP', 'MOBILE_OTP', 'PASSWORD', 'DEMOGRAPHICS', 'AADHAAR_BIO')"
                )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountInformationUsingGET200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountInformationUsingGET200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "address": obj.get("address"),
                "authMethods": obj.get("authMethods"),
                "dayOfBirth": obj.get("dayOfBirth"),
                "districtCode": obj.get("districtCode"),
                "districtName": obj.get("districtName"),
                "email": obj.get("email"),
                "emailVerified": obj.get("emailVerified"),
                "firstName": obj.get("firstName"),
                "gender": obj.get("gender"),
                "healthId": obj.get("healthId"),
                "healthIdNumber": obj.get("healthIdNumber"),
                "kycPhoto": obj.get("kycPhoto"),
                "kycVerified": obj.get("kycVerified"),
                "lastName": obj.get("lastName"),
                "middleName": obj.get("middleName"),
                "mobile": obj.get("mobile"),
                "monthOfBirth": obj.get("monthOfBirth"),
                "name": obj.get("name"),
                "new": obj.get("new"),
                "phrAddress": obj.get("phrAddress"),
                "pincode": obj.get("pincode"),
                "profilePhoto": obj.get("profilePhoto"),
                "stateCode": obj.get("stateCode"),
                "stateName": obj.get("stateName"),
                "subDistrictCode": obj.get("subDistrictCode"),
                "subdistrictName": obj.get("subdistrictName"),
                "tags": obj.get("tags"),
                "townCode": obj.get("townCode"),
                "townName": obj.get("townName"),
                "verificationStatus": obj.get("verificationStatus"),
                "verificationType": obj.get("verificationType"),
                "villageCode": obj.get("villageCode"),
                "villageName": obj.get("villageName"),
                "wardCode": obj.get("wardCode"),
                "wardName": obj.get("wardName"),
                "yearOfBirth": obj.get("yearOfBirth"),
            }
        )
        return _obj
