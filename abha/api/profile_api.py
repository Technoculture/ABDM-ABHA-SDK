# coding: utf-8

"""
ABHA Service

It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue an ABHA Number to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.  The ABHA Number will be used for the purposes of uniquely identifying persons and authenticating them. An ABHA Address will be used for threading their health records (only with the informed consent of the patient) across multiple systems and stakeholders.   <b>API Security</b>  You need Authorization Token and X-HIP-ID to consume APIs. <b>Notes:</b>  <b>1. In case you want to consume the ABHA APIs and use creation on your own interface, use authentication methods as OTP only. </b> <b>2. In order to have access to ABHA APIs, your clientId must have hid role in gateway. So if you want access to these APIs then please request it in your ABDM on-boarding request.</b> <b>3. In order to have access to Integrated Programs ABHA APIs, your clientId must have integrated_program role in gateway. So if you want access to these APIs then please request it in your ABDM on-boarding request. Also you will need to share integrated program benefit name to be used in this case.</b> <b>4. When calling APIs, please ensure that Authorization header must have format as <i>Bearer {Token_Value}</i>. Please note that prefix Bearer is followed by space before the token value.</b> <b>5. Check the state and district codes from LGD directory [click here](https://lgdirectory.gov.in/)</b>  <b>6. For the APIs </b>  - Sensitive data (Data like OTP, Aadhaar Number, Password, Username etc) have to be encrypted. - Data is encrypted by the public certificate. The certificate can be downloaded from the __/v1/auth/cert__ API under __Authentication__ tag. - RSA Encryption to encrypt the data. Cipher Type - <b>RSA/ECB/PKCS1Padding</b>.  online tool to encrypt data [click here](https://www.devglan.com/online-tools/rsa-encryption-decryption)  <b>

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from abha.models.aadhar_number_request_optional_payload import (
    AadharNumberRequestOptionalPayload,
)
from abha.models.aadhar_number_web_optional_request_payload import (
    AadharNumberWebOptionalRequestPayload,
)
from abha.models.benefit_dto import BenefitDTO
from abha.models.byte_array_resource import ByteArrayResource
from abha.models.change_status_by_otp_account_request import (
    ChangeStatusByOtpAccountRequest,
)
from abha.models.email_verification_otp_request import EmailVerificationOTPRequest
from abha.models.hid_change_password_request_payload import (
    HidChangePasswordRequestPayload,
)
from abha.models.hid_otp_request_paylaod import HidOtpRequestPaylaod
from abha.models.mobile_number_new_request_payload import MobileNumberNewRequestPayload
from abha.models.phr_de_linked_request_pay_load import PhrDeLinkedRequestPayLoad
from abha.models.phr_linked_or_de_linked_request_pay_load import (
    PhrLinkedOrDeLinkedRequestPayLoad,
)
from abha.models.txn_response import TxnResponse
from abha.models.update_account_request import UpdateAccountRequest
from abha.models.user_dto import UserDTO
from abha.models.validate_token_request import ValidateTokenRequest
from abha.models.verify_aadhaar_otp import VerifyAadhaarOtp
from abha.models.verify_email_otp_request import VerifyEmailOTPRequest
from abha.models.verify_mobile_web_request import VerifyMobileWebRequest

from abha.api_client import ApiClient, RequestSerialized
from abha.api_response import ApiResponse
from abha.rest import RESTResponseType


class ProfileApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def change_password_via_aadhar_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        hid_otp_request_paylaod: Annotated[
            HidOtpRequestPaylaod, Field(description="hidOtpRequestPaylaod")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Change password via Aadhaar

        <b>Explanation</b> - API accepts <b>Old And New Password and Aadhaar Transaction ID</b> and changes the Password via Aadhaar Transaction ID.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>Old,New Pass. ,Aadhaar Transaction ID</b> and changes the Password via Aadhaar Transaction ID. Returns Error for <b>Unauthorized Aadhaar Transaction ID</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param hid_otp_request_paylaod: hidOtpRequestPaylaod (required)
        :type hid_otp_request_paylaod: HidOtpRequestPaylaod
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._change_password_via_aadhar_using_post_serialize(
            x_token=x_token,
            hid_otp_request_paylaod=hid_otp_request_paylaod,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def change_password_via_aadhar_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        hid_otp_request_paylaod: Annotated[
            HidOtpRequestPaylaod, Field(description="hidOtpRequestPaylaod")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Change password via Aadhaar

        <b>Explanation</b> - API accepts <b>Old And New Password and Aadhaar Transaction ID</b> and changes the Password via Aadhaar Transaction ID.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>Old,New Pass. ,Aadhaar Transaction ID</b> and changes the Password via Aadhaar Transaction ID. Returns Error for <b>Unauthorized Aadhaar Transaction ID</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param hid_otp_request_paylaod: hidOtpRequestPaylaod (required)
        :type hid_otp_request_paylaod: HidOtpRequestPaylaod
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._change_password_via_aadhar_using_post_serialize(
            x_token=x_token,
            hid_otp_request_paylaod=hid_otp_request_paylaod,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def change_password_via_aadhar_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        hid_otp_request_paylaod: Annotated[
            HidOtpRequestPaylaod, Field(description="hidOtpRequestPaylaod")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Change password via Aadhaar

        <b>Explanation</b> - API accepts <b>Old And New Password and Aadhaar Transaction ID</b> and changes the Password via Aadhaar Transaction ID.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>Old,New Pass. ,Aadhaar Transaction ID</b> and changes the Password via Aadhaar Transaction ID. Returns Error for <b>Unauthorized Aadhaar Transaction ID</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param hid_otp_request_paylaod: hidOtpRequestPaylaod (required)
        :type hid_otp_request_paylaod: HidOtpRequestPaylaod
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._change_password_via_aadhar_using_post_serialize(
            x_token=x_token,
            hid_otp_request_paylaod=hid_otp_request_paylaod,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _change_password_via_aadhar_using_post_serialize(
        self,
        x_token,
        hid_otp_request_paylaod,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if hid_otp_request_paylaod is not None:
            _body_params = hid_otp_request_paylaod

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1/account/change/passwd/byAadhaar",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def change_password_via_mobile_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        hid_otp_request_paylaod: Annotated[
            HidOtpRequestPaylaod, Field(description="hidOtpRequestPaylaod")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Change password via mobile for heath id.

        <b>Explanation</b> - API accepts <b>Old And New Password and mobile number</b> and changes the Password via mobile number.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Old And New Password and mobile number</b> and changes the Password via mobile number. Returns Error for <b>Unauthorized mobile </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param hid_otp_request_paylaod: hidOtpRequestPaylaod (required)
        :type hid_otp_request_paylaod: HidOtpRequestPaylaod
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._change_password_via_mobile_using_post_serialize(
            x_token=x_token,
            hid_otp_request_paylaod=hid_otp_request_paylaod,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def change_password_via_mobile_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        hid_otp_request_paylaod: Annotated[
            HidOtpRequestPaylaod, Field(description="hidOtpRequestPaylaod")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Change password via mobile for heath id.

        <b>Explanation</b> - API accepts <b>Old And New Password and mobile number</b> and changes the Password via mobile number.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Old And New Password and mobile number</b> and changes the Password via mobile number. Returns Error for <b>Unauthorized mobile </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param hid_otp_request_paylaod: hidOtpRequestPaylaod (required)
        :type hid_otp_request_paylaod: HidOtpRequestPaylaod
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._change_password_via_mobile_using_post_serialize(
            x_token=x_token,
            hid_otp_request_paylaod=hid_otp_request_paylaod,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def change_password_via_mobile_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        hid_otp_request_paylaod: Annotated[
            HidOtpRequestPaylaod, Field(description="hidOtpRequestPaylaod")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Change password via mobile for heath id.

        <b>Explanation</b> - API accepts <b>Old And New Password and mobile number</b> and changes the Password via mobile number.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Old And New Password and mobile number</b> and changes the Password via mobile number. Returns Error for <b>Unauthorized mobile </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param hid_otp_request_paylaod: hidOtpRequestPaylaod (required)
        :type hid_otp_request_paylaod: HidOtpRequestPaylaod
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._change_password_via_mobile_using_post_serialize(
            x_token=x_token,
            hid_otp_request_paylaod=hid_otp_request_paylaod,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _change_password_via_mobile_using_post_serialize(
        self,
        x_token,
        hid_otp_request_paylaod,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if hid_otp_request_paylaod is not None:
            _body_params = hid_otp_request_paylaod

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1/account/change/passwd/byMobile",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def change_password_via_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        health_facility_password_request: Annotated[
            HidChangePasswordRequestPayload,
            Field(description="healthFacilityPasswordRequest"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Change password via password for heath id.

        <b>Explanation</b> - Api Accepts <b>Old And New Password</b> and changes the Password via new password.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Old And New Password</b> and changes the Password via new password. Returns Error for <b>Unauthorized Password</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param health_facility_password_request: healthFacilityPasswordRequest (required)
        :type health_facility_password_request: HidChangePasswordRequestPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._change_password_via_using_post_serialize(
            x_token=x_token,
            health_facility_password_request=health_facility_password_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def change_password_via_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        health_facility_password_request: Annotated[
            HidChangePasswordRequestPayload,
            Field(description="healthFacilityPasswordRequest"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Change password via password for heath id.

        <b>Explanation</b> - Api Accepts <b>Old And New Password</b> and changes the Password via new password.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Old And New Password</b> and changes the Password via new password. Returns Error for <b>Unauthorized Password</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param health_facility_password_request: healthFacilityPasswordRequest (required)
        :type health_facility_password_request: HidChangePasswordRequestPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._change_password_via_using_post_serialize(
            x_token=x_token,
            health_facility_password_request=health_facility_password_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def change_password_via_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        health_facility_password_request: Annotated[
            HidChangePasswordRequestPayload,
            Field(description="healthFacilityPasswordRequest"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Change password via password for heath id.

        <b>Explanation</b> - Api Accepts <b>Old And New Password</b> and changes the Password via new password.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Old And New Password</b> and changes the Password via new password. Returns Error for <b>Unauthorized Password</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param health_facility_password_request: healthFacilityPasswordRequest (required)
        :type health_facility_password_request: HidChangePasswordRequestPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._change_password_via_using_post_serialize(
            x_token=x_token,
            health_facility_password_request=health_facility_password_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _change_password_via_using_post_serialize(
        self,
        x_token,
        health_facility_password_request,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if health_facility_password_request is not None:
            _body_params = health_facility_password_request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1/account/change/password",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def create_phr_adress_with_health_id_number_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """create ABHA Address With ABHA Number.

        <b>Explanation</b> - API Accepts <b>ABHA Number and Creates ABHA Address</b>.    <b>Request Body</b> - Required    <b>Response</b> - API Accepts <b>ABHA Number and Creates ABHA Address</b>. Returns Error for <b>Invalid/Incorrect Info.</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_phr_adress_with_health_id_number_using_post_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_phr_adress_with_health_id_number_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """create ABHA Address With ABHA Number.

        <b>Explanation</b> - API Accepts <b>ABHA Number and Creates ABHA Address</b>.    <b>Request Body</b> - Required    <b>Response</b> - API Accepts <b>ABHA Number and Creates ABHA Address</b>. Returns Error for <b>Invalid/Incorrect Info.</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_phr_adress_with_health_id_number_using_post_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_phr_adress_with_health_id_number_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create ABHA Address With ABHA Number.

        <b>Explanation</b> - API Accepts <b>ABHA Number and Creates ABHA Address</b>.    <b>Request Body</b> - Required    <b>Response</b> - API Accepts <b>ABHA Number and Creates ABHA Address</b>. Returns Error for <b>Invalid/Incorrect Info.</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_phr_adress_with_health_id_number_using_post_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _create_phr_adress_with_health_id_number_using_post_serialize(
        self,
        x_token,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1/account/update/phr-address",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def deactivate_account_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        deactivate_account_by_otp_web_request: Annotated[
            ChangeStatusByOtpAccountRequest,
            Field(description="deactivateAccountByOtpWebRequest"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deactivate the account using mobile or aadhaar otp.


        :param x_token: Auth Token (required)
        :type x_token: str
        :param deactivate_account_by_otp_web_request: deactivateAccountByOtpWebRequest (required)
        :type deactivate_account_by_otp_web_request: ChangeStatusByOtpAccountRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._deactivate_account_using_post_serialize(
            x_token=x_token,
            deactivate_account_by_otp_web_request=deactivate_account_by_otp_web_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def deactivate_account_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        deactivate_account_by_otp_web_request: Annotated[
            ChangeStatusByOtpAccountRequest,
            Field(description="deactivateAccountByOtpWebRequest"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deactivate the account using mobile or aadhaar otp.


        :param x_token: Auth Token (required)
        :type x_token: str
        :param deactivate_account_by_otp_web_request: deactivateAccountByOtpWebRequest (required)
        :type deactivate_account_by_otp_web_request: ChangeStatusByOtpAccountRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._deactivate_account_using_post_serialize(
            x_token=x_token,
            deactivate_account_by_otp_web_request=deactivate_account_by_otp_web_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def deactivate_account_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        deactivate_account_by_otp_web_request: Annotated[
            ChangeStatusByOtpAccountRequest,
            Field(description="deactivateAccountByOtpWebRequest"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deactivate the account using mobile or aadhaar otp.


        :param x_token: Auth Token (required)
        :type x_token: str
        :param deactivate_account_by_otp_web_request: deactivateAccountByOtpWebRequest (required)
        :type deactivate_account_by_otp_web_request: ChangeStatusByOtpAccountRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._deactivate_account_using_post_serialize(
            x_token=x_token,
            deactivate_account_by_otp_web_request=deactivate_account_by_otp_web_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _deactivate_account_using_post_serialize(
        self,
        x_token,
        deactivate_account_by_otp_web_request,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if deactivate_account_by_otp_web_request is not None:
            _body_params = deactivate_account_by_otp_web_request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v2/account/profile/deactivate",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_account_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        delete_account_by_otp_web_request: Annotated[
            ChangeStatusByOtpAccountRequest,
            Field(description="deleteAccountByOtpWebRequest"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete the account using mobile or aadhaar otp.


        :param x_token: Auth Token (required)
        :type x_token: str
        :param delete_account_by_otp_web_request: deleteAccountByOtpWebRequest (required)
        :type delete_account_by_otp_web_request: ChangeStatusByOtpAccountRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_account_using_post_serialize(
            x_token=x_token,
            delete_account_by_otp_web_request=delete_account_by_otp_web_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_account_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        delete_account_by_otp_web_request: Annotated[
            ChangeStatusByOtpAccountRequest,
            Field(description="deleteAccountByOtpWebRequest"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete the account using mobile or aadhaar otp.


        :param x_token: Auth Token (required)
        :type x_token: str
        :param delete_account_by_otp_web_request: deleteAccountByOtpWebRequest (required)
        :type delete_account_by_otp_web_request: ChangeStatusByOtpAccountRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_account_using_post_serialize(
            x_token=x_token,
            delete_account_by_otp_web_request=delete_account_by_otp_web_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_account_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        delete_account_by_otp_web_request: Annotated[
            ChangeStatusByOtpAccountRequest,
            Field(description="deleteAccountByOtpWebRequest"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete the account using mobile or aadhaar otp.


        :param x_token: Auth Token (required)
        :type x_token: str
        :param delete_account_by_otp_web_request: deleteAccountByOtpWebRequest (required)
        :type delete_account_by_otp_web_request: ChangeStatusByOtpAccountRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_account_using_post_serialize(
            x_token=x_token,
            delete_account_by_otp_web_request=delete_account_by_otp_web_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _delete_account_using_post_serialize(
        self,
        x_token,
        delete_account_by_otp_web_request,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if delete_account_by_otp_web_request is not None:
            _body_params = delete_account_by_otp_web_request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v2/account/profile/delete",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def generate_aadhar_otp_using_get(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TxnResponse:
        """Generate Aadhaar OTP on Registered mobile number.

        <b>Explanation</b> - API accepts <b>Auth Token</b> and creates Aadhaar OTP to start registration.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>Auth Token</b> and creates Aadhaar OTP to start registration. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_aadhar_otp_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def generate_aadhar_otp_using_get_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TxnResponse]:
        """Generate Aadhaar OTP on Registered mobile number.

        <b>Explanation</b> - API accepts <b>Auth Token</b> and creates Aadhaar OTP to start registration.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>Auth Token</b> and creates Aadhaar OTP to start registration. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_aadhar_otp_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def generate_aadhar_otp_using_get_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate Aadhaar OTP on Registered mobile number.

        <b>Explanation</b> - API accepts <b>Auth Token</b> and creates Aadhaar OTP to start registration.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>Auth Token</b> and creates Aadhaar OTP to start registration. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_aadhar_otp_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _generate_aadhar_otp_using_get_serialize(
        self,
        x_token,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/account/change/passwd/generateAadhaarOTP",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def generate_card_using_get(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ByteArrayResource:
        """Generate ABHA card in PDF format

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PDF format.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PDF format. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_card_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ByteArrayResource",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def generate_card_using_get_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ByteArrayResource]:
        """Generate ABHA card in PDF format

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PDF format.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PDF format. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_card_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ByteArrayResource",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def generate_card_using_get_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate ABHA card in PDF format

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PDF format.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PDF format. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_card_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ByteArrayResource",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _generate_card_using_get_serialize(
        self,
        x_token,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/account/getCard",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def generate_mobile_otp_using_get(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TxnResponse:
        """Generate Mobile OTP to start registration.

        <b>Explanation</b> - API accepts <b>Auth Token</b> and creates OTP to start registration.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Auth Token</b> and creates OTP to start registration. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_mobile_otp_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def generate_mobile_otp_using_get_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TxnResponse]:
        """Generate Mobile OTP to start registration.

        <b>Explanation</b> - API accepts <b>Auth Token</b> and creates OTP to start registration.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Auth Token</b> and creates OTP to start registration. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_mobile_otp_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def generate_mobile_otp_using_get_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate Mobile OTP to start registration.

        <b>Explanation</b> - API accepts <b>Auth Token</b> and creates OTP to start registration.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Auth Token</b> and creates OTP to start registration. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_mobile_otp_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _generate_mobile_otp_using_get_serialize(
        self,
        x_token,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/account/change/passwd/generateMobileOTP",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def generate_mobile_otp_using_post3(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TxnResponse:
        """Generate Mobile OTP to start mobile txn.

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and Generates OTP on mobile number.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and Generates OTP on mobile number. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_mobile_otp_using_post3_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def generate_mobile_otp_using_post3_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TxnResponse]:
        """Generate Mobile OTP to start mobile txn.

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and Generates OTP on mobile number.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and Generates OTP on mobile number. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_mobile_otp_using_post3_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def generate_mobile_otp_using_post3_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate Mobile OTP to start mobile txn.

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and Generates OTP on mobile number.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and Generates OTP on mobile number. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_mobile_otp_using_post3_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _generate_mobile_otp_using_post3_serialize(
        self,
        x_token,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v2/account/mobile/generateOTP",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def generate_png_card_using_get(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ByteArrayResource:
        """Generate ABHA card PNG

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PNG format.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PNG format. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_png_card_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ByteArrayResource",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def generate_png_card_using_get_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ByteArrayResource]:
        """Generate ABHA card PNG

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PNG format.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PNG format. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_png_card_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ByteArrayResource",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def generate_png_card_using_get_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate ABHA card PNG

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PNG format.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for PNG format. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_png_card_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ByteArrayResource",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _generate_png_card_using_get_serialize(
        self,
        x_token,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/account/getPngCard",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def generate_svg_card_using_get(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Generate ABHA card SVG

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for SVG format.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for SVG format. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_svg_card_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def generate_svg_card_using_get_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Generate ABHA card SVG

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for SVG format.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for SVG format. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_svg_card_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def generate_svg_card_using_get_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate ABHA card SVG

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for SVG format.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details for SVG format. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generate_svg_card_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _generate_svg_card_using_get_serialize(
        self,
        x_token,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/account/getSvgCard",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def generatere_kyc_aadhar_otp_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        aadhar_number_request_optional_payload: Annotated[
            AadharNumberRequestOptionalPayload,
            Field(description="aadharNumberRequestOptionalPayload"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TxnResponse:
        """Generate Aadhaar OTP on Registered for link account with aadhar number

        <b>Explanation</b> - API accepts <b>Auth Token</b> and then Generates Aadhaar OTP for Registered Mobile number.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Auth Token</b> and then Generates Aadhaar OTP for Registered Mobile number. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param aadhar_number_request_optional_payload: aadharNumberRequestOptionalPayload (required)
        :type aadhar_number_request_optional_payload: AadharNumberRequestOptionalPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generatere_kyc_aadhar_otp_using_post_serialize(
            x_token=x_token,
            aadhar_number_request_optional_payload=aadhar_number_request_optional_payload,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def generatere_kyc_aadhar_otp_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        aadhar_number_request_optional_payload: Annotated[
            AadharNumberRequestOptionalPayload,
            Field(description="aadharNumberRequestOptionalPayload"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TxnResponse]:
        """Generate Aadhaar OTP on Registered for link account with aadhar number

        <b>Explanation</b> - API accepts <b>Auth Token</b> and then Generates Aadhaar OTP for Registered Mobile number.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Auth Token</b> and then Generates Aadhaar OTP for Registered Mobile number. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param aadhar_number_request_optional_payload: aadharNumberRequestOptionalPayload (required)
        :type aadhar_number_request_optional_payload: AadharNumberRequestOptionalPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generatere_kyc_aadhar_otp_using_post_serialize(
            x_token=x_token,
            aadhar_number_request_optional_payload=aadhar_number_request_optional_payload,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def generatere_kyc_aadhar_otp_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        aadhar_number_request_optional_payload: Annotated[
            AadharNumberRequestOptionalPayload,
            Field(description="aadharNumberRequestOptionalPayload"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate Aadhaar OTP on Registered for link account with aadhar number

        <b>Explanation</b> - API accepts <b>Auth Token</b> and then Generates Aadhaar OTP for Registered Mobile number.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Auth Token</b> and then Generates Aadhaar OTP for Registered Mobile number. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param aadhar_number_request_optional_payload: aadharNumberRequestOptionalPayload (required)
        :type aadhar_number_request_optional_payload: AadharNumberRequestOptionalPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generatere_kyc_aadhar_otp_using_post_serialize(
            x_token=x_token,
            aadhar_number_request_optional_payload=aadhar_number_request_optional_payload,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _generatere_kyc_aadhar_otp_using_post_serialize(
        self,
        x_token,
        aadhar_number_request_optional_payload,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if aadhar_number_request_optional_payload is not None:
            _body_params = aadhar_number_request_optional_payload

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1/account/aadhaar/generateOTP",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def generatere_kyc_aadhar_otp_using_post1(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        aadhar_number_web_optional_request_payload: Annotated[
            AadharNumberWebOptionalRequestPayload,
            Field(description="aadharNumberWebOptionalRequestPayload"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TxnResponse:
        """Generate Aadhaar OTP on mobile number linked with Aadhar

        <b>Explanation</b> - API accepts <b>Auth Token</b> and Generates OTP on Linked mobile number.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>Auth Token</b> and Generates OTP on Linked mobile number. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param aadhar_number_web_optional_request_payload: aadharNumberWebOptionalRequestPayload (required)
        :type aadhar_number_web_optional_request_payload: AadharNumberWebOptionalRequestPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generatere_kyc_aadhar_otp_using_post1_serialize(
            x_token=x_token,
            aadhar_number_web_optional_request_payload=aadhar_number_web_optional_request_payload,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def generatere_kyc_aadhar_otp_using_post1_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        aadhar_number_web_optional_request_payload: Annotated[
            AadharNumberWebOptionalRequestPayload,
            Field(description="aadharNumberWebOptionalRequestPayload"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TxnResponse]:
        """Generate Aadhaar OTP on mobile number linked with Aadhar

        <b>Explanation</b> - API accepts <b>Auth Token</b> and Generates OTP on Linked mobile number.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>Auth Token</b> and Generates OTP on Linked mobile number. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param aadhar_number_web_optional_request_payload: aadharNumberWebOptionalRequestPayload (required)
        :type aadhar_number_web_optional_request_payload: AadharNumberWebOptionalRequestPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generatere_kyc_aadhar_otp_using_post1_serialize(
            x_token=x_token,
            aadhar_number_web_optional_request_payload=aadhar_number_web_optional_request_payload,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def generatere_kyc_aadhar_otp_using_post1_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        aadhar_number_web_optional_request_payload: Annotated[
            AadharNumberWebOptionalRequestPayload,
            Field(description="aadharNumberWebOptionalRequestPayload"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate Aadhaar OTP on mobile number linked with Aadhar

        <b>Explanation</b> - API accepts <b>Auth Token</b> and Generates OTP on Linked mobile number.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>Auth Token</b> and Generates OTP on Linked mobile number. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param aadhar_number_web_optional_request_payload: aadharNumberWebOptionalRequestPayload (required)
        :type aadhar_number_web_optional_request_payload: AadharNumberWebOptionalRequestPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generatere_kyc_aadhar_otp_using_post1_serialize(
            x_token=x_token,
            aadhar_number_web_optional_request_payload=aadhar_number_web_optional_request_payload,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _generatere_kyc_aadhar_otp_using_post1_serialize(
        self,
        x_token,
        aadhar_number_web_optional_request_payload,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if aadhar_number_web_optional_request_payload is not None:
            _body_params = aadhar_number_web_optional_request_payload

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v2/account/aadhaar/generateOTP",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def generatere_new_mobile_otp_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        mobile_number_new_request_payload: Annotated[
            MobileNumberNewRequestPayload,
            Field(description="mobileNumberNewRequestPayload"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TxnResponse:
        """Generate OTP on new mobile need to update existing account mobile number

        <b>Explanation</b> - Api Accepts <b>New Mobile Number and Auth Token</b> and creates OTP.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>New Mobile Number and Auth Token</b> and creates OTP. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param mobile_number_new_request_payload: mobileNumberNewRequestPayload (required)
        :type mobile_number_new_request_payload: MobileNumberNewRequestPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generatere_new_mobile_otp_using_post_serialize(
            x_token=x_token,
            mobile_number_new_request_payload=mobile_number_new_request_payload,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def generatere_new_mobile_otp_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        mobile_number_new_request_payload: Annotated[
            MobileNumberNewRequestPayload,
            Field(description="mobileNumberNewRequestPayload"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TxnResponse]:
        """Generate OTP on new mobile need to update existing account mobile number

        <b>Explanation</b> - Api Accepts <b>New Mobile Number and Auth Token</b> and creates OTP.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>New Mobile Number and Auth Token</b> and creates OTP. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param mobile_number_new_request_payload: mobileNumberNewRequestPayload (required)
        :type mobile_number_new_request_payload: MobileNumberNewRequestPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generatere_new_mobile_otp_using_post_serialize(
            x_token=x_token,
            mobile_number_new_request_payload=mobile_number_new_request_payload,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def generatere_new_mobile_otp_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        mobile_number_new_request_payload: Annotated[
            MobileNumberNewRequestPayload,
            Field(description="mobileNumberNewRequestPayload"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate OTP on new mobile need to update existing account mobile number

        <b>Explanation</b> - Api Accepts <b>New Mobile Number and Auth Token</b> and creates OTP.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>New Mobile Number and Auth Token</b> and creates OTP. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param mobile_number_new_request_payload: mobileNumberNewRequestPayload (required)
        :type mobile_number_new_request_payload: MobileNumberNewRequestPayload
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._generatere_new_mobile_otp_using_post_serialize(
            x_token=x_token,
            mobile_number_new_request_payload=mobile_number_new_request_payload,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _generatere_new_mobile_otp_using_post_serialize(
        self,
        x_token,
        mobile_number_new_request_payload,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if mobile_number_new_request_payload is not None:
            _body_params = mobile_number_new_request_payload

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v2/account/change/mobile/new/generateOTP",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_account_information_using_get(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UserDTO:
        """Get account information.

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_account_information_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UserDTO",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_account_information_using_get_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UserDTO]:
        """Get account information.

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_account_information_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UserDTO",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_account_information_using_get_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get account information.

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Returns Account Details. Returns Error for <b>Unauthorized Auth Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_account_information_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UserDTO",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_account_information_using_get_serialize(
        self,
        x_token,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/account/profile",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_benefits_using_get(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BenefitDTO:
        """Get List of Benefits associated with HealthID.

        <b>Explanation</b> - API accepts <b>Auth Token</b> and returns List of Benefits associated with HealthID.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Auth Token</b> and returns List of Benefits associated with HealthID. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_benefits_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "BenefitDTO",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_benefits_using_get_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BenefitDTO]:
        """Get List of Benefits associated with HealthID.

        <b>Explanation</b> - API accepts <b>Auth Token</b> and returns List of Benefits associated with HealthID.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Auth Token</b> and returns List of Benefits associated with HealthID. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_benefits_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "BenefitDTO",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_benefits_using_get_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get List of Benefits associated with HealthID.

        <b>Explanation</b> - API accepts <b>Auth Token</b> and returns List of Benefits associated with HealthID.    <b>Request Body</b> - Required    <b>Responce</b> - API accepts <b>Auth Token</b> and returns List of Benefits associated with HealthID. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_benefits_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "BenefitDTO",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_benefits_using_get_serialize(
        self,
        x_token,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/account/benefits",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_qr_code_using_get(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Get Quick Response code in PNG format for this account.

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then returns Account Info for QR Code.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then returns Account Info for QR Code. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_qr_code_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_qr_code_using_get_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Get Quick Response code in PNG format for this account.

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then returns Account Info for QR Code.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then returns Account Info for QR Code. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_qr_code_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_qr_code_using_get_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Quick Response code in PNG format for this account.

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then returns Account Info for QR Code.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then returns Account Info for QR Code. Returns Error for <b>Unauthorized Token</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_qr_code_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_qr_code_using_get_serialize(
        self,
        x_token,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*", "image/png"]
        )

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/account/qrCode",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def logout_using_get(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Logout of account

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and logout of the account.    <b>Request Body</b> - Required    <b>Response</b> - Api Accepts <b>Auth Token</b> and logout of the account. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._logout_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def logout_using_get_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Logout of account

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and logout of the account.    <b>Request Body</b> - Required    <b>Response</b> - Api Accepts <b>Auth Token</b> and logout of the account. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._logout_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def logout_using_get_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Logout of account

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and logout of the account.    <b>Request Body</b> - Required    <b>Response</b> - Api Accepts <b>Auth Token</b> and logout of the account. Returns Error for <b>Unauthorized token </b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._logout_using_get_serialize(
            x_token=x_token,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _logout_using_get_serialize(
        self,
        x_token,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/account/logout",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def phr_de_linked_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        phr_linked_or_de_linked_request_pay_load: Annotated[
            PhrDeLinkedRequestPayLoad,
            Field(description="phrLinkedOrDeLinkedRequestPayLoad"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bool:
        """de-links the given ABHA Address from the ABHA number

        <b>Explanation</b> - API delinks a given ABHA Address from the ABHA number    <b>Request Body</b> - Required

        :param x_token: Auth Token (required)
        :type x_token: str
        :param phr_linked_or_de_linked_request_pay_load: phrLinkedOrDeLinkedRequestPayLoad (required)
        :type phr_linked_or_de_linked_request_pay_load: PhrDeLinkedRequestPayLoad
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._phr_de_linked_using_post_serialize(
            x_token=x_token,
            phr_linked_or_de_linked_request_pay_load=phr_linked_or_de_linked_request_pay_load,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def phr_de_linked_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        phr_linked_or_de_linked_request_pay_load: Annotated[
            PhrDeLinkedRequestPayLoad,
            Field(description="phrLinkedOrDeLinkedRequestPayLoad"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bool]:
        """de-links the given ABHA Address from the ABHA number

        <b>Explanation</b> - API delinks a given ABHA Address from the ABHA number    <b>Request Body</b> - Required

        :param x_token: Auth Token (required)
        :type x_token: str
        :param phr_linked_or_de_linked_request_pay_load: phrLinkedOrDeLinkedRequestPayLoad (required)
        :type phr_linked_or_de_linked_request_pay_load: PhrDeLinkedRequestPayLoad
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._phr_de_linked_using_post_serialize(
            x_token=x_token,
            phr_linked_or_de_linked_request_pay_load=phr_linked_or_de_linked_request_pay_load,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def phr_de_linked_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        phr_linked_or_de_linked_request_pay_load: Annotated[
            PhrDeLinkedRequestPayLoad,
            Field(description="phrLinkedOrDeLinkedRequestPayLoad"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """de-links the given ABHA Address from the ABHA number

        <b>Explanation</b> - API delinks a given ABHA Address from the ABHA number    <b>Request Body</b> - Required

        :param x_token: Auth Token (required)
        :type x_token: str
        :param phr_linked_or_de_linked_request_pay_load: phrLinkedOrDeLinkedRequestPayLoad (required)
        :type phr_linked_or_de_linked_request_pay_load: PhrDeLinkedRequestPayLoad
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._phr_de_linked_using_post_serialize(
            x_token=x_token,
            phr_linked_or_de_linked_request_pay_load=phr_linked_or_de_linked_request_pay_load,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _phr_de_linked_using_post_serialize(
        self,
        x_token,
        phr_linked_or_de_linked_request_pay_load,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if phr_linked_or_de_linked_request_pay_load is not None:
            _body_params = phr_linked_or_de_linked_request_pay_load

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v2/account/phr-delinked",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def phr_linked_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        phr_linked_or_de_linked_request_pay_load: Annotated[
            PhrLinkedOrDeLinkedRequestPayLoad,
            Field(description="phrLinkedOrDeLinkedRequestPayLoad"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bool:
        """links the given ABHA Address to the ABHA number

        <b>Explanation</b> - API links the given ABHA Address to the ABHA number and defines whether it is the preferred ABHA Address    <b>Request Body</b> - Required

        :param x_token: Auth Token (required)
        :type x_token: str
        :param phr_linked_or_de_linked_request_pay_load: phrLinkedOrDeLinkedRequestPayLoad (required)
        :type phr_linked_or_de_linked_request_pay_load: PhrLinkedOrDeLinkedRequestPayLoad
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._phr_linked_using_post_serialize(
            x_token=x_token,
            phr_linked_or_de_linked_request_pay_load=phr_linked_or_de_linked_request_pay_load,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def phr_linked_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        phr_linked_or_de_linked_request_pay_load: Annotated[
            PhrLinkedOrDeLinkedRequestPayLoad,
            Field(description="phrLinkedOrDeLinkedRequestPayLoad"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bool]:
        """links the given ABHA Address to the ABHA number

        <b>Explanation</b> - API links the given ABHA Address to the ABHA number and defines whether it is the preferred ABHA Address    <b>Request Body</b> - Required

        :param x_token: Auth Token (required)
        :type x_token: str
        :param phr_linked_or_de_linked_request_pay_load: phrLinkedOrDeLinkedRequestPayLoad (required)
        :type phr_linked_or_de_linked_request_pay_load: PhrLinkedOrDeLinkedRequestPayLoad
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._phr_linked_using_post_serialize(
            x_token=x_token,
            phr_linked_or_de_linked_request_pay_load=phr_linked_or_de_linked_request_pay_load,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def phr_linked_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        phr_linked_or_de_linked_request_pay_load: Annotated[
            PhrLinkedOrDeLinkedRequestPayLoad,
            Field(description="phrLinkedOrDeLinkedRequestPayLoad"),
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """links the given ABHA Address to the ABHA number

        <b>Explanation</b> - API links the given ABHA Address to the ABHA number and defines whether it is the preferred ABHA Address    <b>Request Body</b> - Required

        :param x_token: Auth Token (required)
        :type x_token: str
        :param phr_linked_or_de_linked_request_pay_load: phrLinkedOrDeLinkedRequestPayLoad (required)
        :type phr_linked_or_de_linked_request_pay_load: PhrLinkedOrDeLinkedRequestPayLoad
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._phr_linked_using_post_serialize(
            x_token=x_token,
            phr_linked_or_de_linked_request_pay_load=phr_linked_or_de_linked_request_pay_load,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _phr_linked_using_post_serialize(
        self,
        x_token,
        phr_linked_or_de_linked_request_pay_load,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if phr_linked_or_de_linked_request_pay_load is not None:
            _body_params = phr_linked_or_de_linked_request_pay_load

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v2/account/phr-linked",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def send_email_initiate_verification_e_mail_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        request: Annotated[
            Optional[EmailVerificationOTPRequest], Field(description="request")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Send the Email Verification Activation Link to verify the E-mail Address.

        <h2>Notes</h2>  <p>1: To verify the <b>Email Address</b> provided by the beneficiary during the <b style='color:black'>registration</b> process, Send the <b>Email Address</b> in the request.</p>  <p>2: Activation link will be expire in <strong style='color:red'>2 hours</strong>.</p><p>3: To regenerate the <b style='color:DodgerBlue'>Activation link</b> when the previous link is expired. Send the X-Token <sup style='color:red'>* required</sup> in the Header.</p>  <p>4: To <b style='color:red'>Update or Changes</b> the existing e-mail Address (Verified/Unverified email). Send the <b>New Email Address</b><sup style='color:red'>* required</sup> in the request.</p>  <p>5: To Generate the activation link user / OTP must be authorized

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param request: request
        :type request: EmailVerificationOTPRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_email_initiate_verification_e_mail_using_post_serialize(
            x_token=x_token,
            accept_language=accept_language,
            request=request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def send_email_initiate_verification_e_mail_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        request: Annotated[
            Optional[EmailVerificationOTPRequest], Field(description="request")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Send the Email Verification Activation Link to verify the E-mail Address.

        <h2>Notes</h2>  <p>1: To verify the <b>Email Address</b> provided by the beneficiary during the <b style='color:black'>registration</b> process, Send the <b>Email Address</b> in the request.</p>  <p>2: Activation link will be expire in <strong style='color:red'>2 hours</strong>.</p><p>3: To regenerate the <b style='color:DodgerBlue'>Activation link</b> when the previous link is expired. Send the X-Token <sup style='color:red'>* required</sup> in the Header.</p>  <p>4: To <b style='color:red'>Update or Changes</b> the existing e-mail Address (Verified/Unverified email). Send the <b>New Email Address</b><sup style='color:red'>* required</sup> in the request.</p>  <p>5: To Generate the activation link user / OTP must be authorized

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param request: request
        :type request: EmailVerificationOTPRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_email_initiate_verification_e_mail_using_post_serialize(
            x_token=x_token,
            accept_language=accept_language,
            request=request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def send_email_initiate_verification_e_mail_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        accept_language: Optional[StrictStr] = None,
        request: Annotated[
            Optional[EmailVerificationOTPRequest], Field(description="request")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Send the Email Verification Activation Link to verify the E-mail Address.

        <h2>Notes</h2>  <p>1: To verify the <b>Email Address</b> provided by the beneficiary during the <b style='color:black'>registration</b> process, Send the <b>Email Address</b> in the request.</p>  <p>2: Activation link will be expire in <strong style='color:red'>2 hours</strong>.</p><p>3: To regenerate the <b style='color:DodgerBlue'>Activation link</b> when the previous link is expired. Send the X-Token <sup style='color:red'>* required</sup> in the Header.</p>  <p>4: To <b style='color:red'>Update or Changes</b> the existing e-mail Address (Verified/Unverified email). Send the <b>New Email Address</b><sup style='color:red'>* required</sup> in the request.</p>  <p>5: To Generate the activation link user / OTP must be authorized

        :param x_token: Auth Token (required)
        :type x_token: str
        :param accept_language:
        :type accept_language: str
        :param request: request
        :type request: EmailVerificationOTPRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_email_initiate_verification_e_mail_using_post_serialize(
            x_token=x_token,
            accept_language=accept_language,
            request=request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "str",
            "201": None,
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _send_email_initiate_verification_e_mail_using_post_serialize(
        self,
        x_token,
        accept_language,
        request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if request is not None:
            _body_params = request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v2/account/email/verification/auth/initiate/send",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def send_email_user_auth_verification_e_mail_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        request: Annotated[VerifyEmailOTPRequest, Field(description="request")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bool:
        """Verfiy the user initiate the Activation Link.

        <h2>Notes</h2>  <p>1: To authenticate the user,Send the <b>Transaction Id</b><sup style='color:red'>* required</sup>  and <b>Authenticate Mode</b><sup style='color:red'>* required</sup>  in the request.</p>  <p>2: Valid modes of Authentication are <strong style='color:red'> MOBILE_OTP, AADHAAR_OTP, PASSWORD </strong>  <p>3: Send the X-Token<sup style='color:red'>* required</sup>.</p>  <p>4: <b>OTP/PASSWORD must be in encrypted form</b>, Plain Form OTP is not allowed</p>

        :param x_token: Auth Token (required)
        :type x_token: str
        :param request: request (required)
        :type request: VerifyEmailOTPRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_email_user_auth_verification_e_mail_using_post_serialize(
            x_token=x_token,
            request=request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def send_email_user_auth_verification_e_mail_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        request: Annotated[VerifyEmailOTPRequest, Field(description="request")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bool]:
        """Verfiy the user initiate the Activation Link.

        <h2>Notes</h2>  <p>1: To authenticate the user,Send the <b>Transaction Id</b><sup style='color:red'>* required</sup>  and <b>Authenticate Mode</b><sup style='color:red'>* required</sup>  in the request.</p>  <p>2: Valid modes of Authentication are <strong style='color:red'> MOBILE_OTP, AADHAAR_OTP, PASSWORD </strong>  <p>3: Send the X-Token<sup style='color:red'>* required</sup>.</p>  <p>4: <b>OTP/PASSWORD must be in encrypted form</b>, Plain Form OTP is not allowed</p>

        :param x_token: Auth Token (required)
        :type x_token: str
        :param request: request (required)
        :type request: VerifyEmailOTPRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_email_user_auth_verification_e_mail_using_post_serialize(
            x_token=x_token,
            request=request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def send_email_user_auth_verification_e_mail_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        request: Annotated[VerifyEmailOTPRequest, Field(description="request")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Verfiy the user initiate the Activation Link.

        <h2>Notes</h2>  <p>1: To authenticate the user,Send the <b>Transaction Id</b><sup style='color:red'>* required</sup>  and <b>Authenticate Mode</b><sup style='color:red'>* required</sup>  in the request.</p>  <p>2: Valid modes of Authentication are <strong style='color:red'> MOBILE_OTP, AADHAAR_OTP, PASSWORD </strong>  <p>3: Send the X-Token<sup style='color:red'>* required</sup>.</p>  <p>4: <b>OTP/PASSWORD must be in encrypted form</b>, Plain Form OTP is not allowed</p>

        :param x_token: Auth Token (required)
        :type x_token: str
        :param request: request (required)
        :type request: VerifyEmailOTPRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_email_user_auth_verification_e_mail_using_post_serialize(
            x_token=x_token,
            request=request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _send_email_user_auth_verification_e_mail_using_post_serialize(
        self,
        x_token,
        request,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if request is not None:
            _body_params = request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v2/account/email/verification/auth/verify",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def update_account_information_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        request: Annotated[UpdateAccountRequest, Field(description="request")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UserDTO:
        """Update account information

        <b>Explanation</b> - Api Accepts <b>Account Details</b> and then Updates Account Details Accordingly.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Account Details</b> and then Updates Account Details Accordingly. Returns Error for <b>Unauthorized Account Details</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param request: request (required)
        :type request: UpdateAccountRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_account_information_using_post_serialize(
            x_token=x_token,
            request=request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UserDTO",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def update_account_information_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        request: Annotated[UpdateAccountRequest, Field(description="request")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UserDTO]:
        """Update account information

        <b>Explanation</b> - Api Accepts <b>Account Details</b> and then Updates Account Details Accordingly.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Account Details</b> and then Updates Account Details Accordingly. Returns Error for <b>Unauthorized Account Details</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param request: request (required)
        :type request: UpdateAccountRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_account_information_using_post_serialize(
            x_token=x_token,
            request=request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UserDTO",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def update_account_information_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        request: Annotated[UpdateAccountRequest, Field(description="request")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update account information

        <b>Explanation</b> - Api Accepts <b>Account Details</b> and then Updates Account Details Accordingly.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Account Details</b> and then Updates Account Details Accordingly. Returns Error for <b>Unauthorized Account Details</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param request: request (required)
        :type request: UpdateAccountRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_account_information_using_post_serialize(
            x_token=x_token,
            request=request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "UserDTO",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _update_account_information_using_post_serialize(
        self,
        x_token,
        request,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if request is not None:
            _body_params = request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1/account/profile",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def validate_token_using_post(
        self,
        request: Annotated[ValidateTokenRequest, Field(description="request")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bool:
        """Validate auth token

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Checks is it Valid/Invalid/Expired.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Checks is it Valid/Invalid/Expired. Returns Error for <b>Unauthorized Token</b>.

        :param request: request (required)
        :type request: ValidateTokenRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._validate_token_using_post_serialize(
            request=request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def validate_token_using_post_with_http_info(
        self,
        request: Annotated[ValidateTokenRequest, Field(description="request")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bool]:
        """Validate auth token

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Checks is it Valid/Invalid/Expired.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Checks is it Valid/Invalid/Expired. Returns Error for <b>Unauthorized Token</b>.

        :param request: request (required)
        :type request: ValidateTokenRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._validate_token_using_post_serialize(
            request=request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def validate_token_using_post_without_preload_content(
        self,
        request: Annotated[ValidateTokenRequest, Field(description="request")],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Validate auth token

        <b>Explanation</b> - Api Accepts <b>Auth Token</b> and then Checks is it Valid/Invalid/Expired.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>Auth Token</b> and then Checks is it Valid/Invalid/Expired. Returns Error for <b>Unauthorized Token</b>.

        :param request: request (required)
        :type request: ValidateTokenRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._validate_token_using_post_serialize(
            request=request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _validate_token_using_post_serialize(
        self,
        request,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        # process the form parameters
        # process the body parameter
        if request is not None:
            _body_params = request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1/account/token",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def verify_aadhar_otp_only_using_post1(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        verify_aadhaar_otp: Annotated[
            VerifyAadhaarOtp, Field(description="verifyAadhaarOtp")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bool:
        """Verify Aadhaar OTP to complete KYC/re-KYC verification.

        <b>Explanation</b> - API accepts <b>OTP</b> and Checks is it Valid/Invalid/Expired to complete KYC/re-KYC verification.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>OTP</b> and checks is it Valid/Invalid/Expired to complete KYC/re-KYC verification. Returns Error for <b>Unauthorized OTP</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param verify_aadhaar_otp: verifyAadhaarOtp (required)
        :type verify_aadhaar_otp: VerifyAadhaarOtp
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._verify_aadhar_otp_only_using_post1_serialize(
            x_token=x_token,
            verify_aadhaar_otp=verify_aadhaar_otp,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def verify_aadhar_otp_only_using_post1_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        verify_aadhaar_otp: Annotated[
            VerifyAadhaarOtp, Field(description="verifyAadhaarOtp")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bool]:
        """Verify Aadhaar OTP to complete KYC/re-KYC verification.

        <b>Explanation</b> - API accepts <b>OTP</b> and Checks is it Valid/Invalid/Expired to complete KYC/re-KYC verification.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>OTP</b> and checks is it Valid/Invalid/Expired to complete KYC/re-KYC verification. Returns Error for <b>Unauthorized OTP</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param verify_aadhaar_otp: verifyAadhaarOtp (required)
        :type verify_aadhaar_otp: VerifyAadhaarOtp
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._verify_aadhar_otp_only_using_post1_serialize(
            x_token=x_token,
            verify_aadhaar_otp=verify_aadhaar_otp,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def verify_aadhar_otp_only_using_post1_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        verify_aadhaar_otp: Annotated[
            VerifyAadhaarOtp, Field(description="verifyAadhaarOtp")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Verify Aadhaar OTP to complete KYC/re-KYC verification.

        <b>Explanation</b> - API accepts <b>OTP</b> and Checks is it Valid/Invalid/Expired to complete KYC/re-KYC verification.    <b>Request Body</b> - Required    <b>Response</b> - API accepts <b>OTP</b> and checks is it Valid/Invalid/Expired to complete KYC/re-KYC verification. Returns Error for <b>Unauthorized OTP</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param verify_aadhaar_otp: verifyAadhaarOtp (required)
        :type verify_aadhaar_otp: VerifyAadhaarOtp
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._verify_aadhar_otp_only_using_post1_serialize(
            x_token=x_token,
            verify_aadhaar_otp=verify_aadhaar_otp,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bool",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _verify_aadhar_otp_only_using_post1_serialize(
        self,
        x_token,
        verify_aadhaar_otp,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if verify_aadhaar_otp is not None:
            _body_params = verify_aadhaar_otp

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1/account/aadhaar/verifyOTP",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def verify_new_mobile_otp_using_post(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        verify_mobile_web_request: Annotated[
            VerifyMobileWebRequest, Field(description="verifyAadhaarOtpWebPaylaod")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TxnResponse:
        """Verify Mobile OTP to complete new mobile update verification.

        <b>Explanation</b> - Api Accepts <b>New Mobile Number OTP</b> and Verifies it.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>New Mobile Number OTP</b> and Verifies it. Returns Error for <b>Unauthorized OTP</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param verify_mobile_web_request: verifyAadhaarOtpWebPaylaod (required)
        :type verify_mobile_web_request: VerifyMobileWebRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._verify_new_mobile_otp_using_post_serialize(
            x_token=x_token,
            verify_mobile_web_request=verify_mobile_web_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def verify_new_mobile_otp_using_post_with_http_info(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        verify_mobile_web_request: Annotated[
            VerifyMobileWebRequest, Field(description="verifyAadhaarOtpWebPaylaod")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TxnResponse]:
        """Verify Mobile OTP to complete new mobile update verification.

        <b>Explanation</b> - Api Accepts <b>New Mobile Number OTP</b> and Verifies it.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>New Mobile Number OTP</b> and Verifies it. Returns Error for <b>Unauthorized OTP</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param verify_mobile_web_request: verifyAadhaarOtpWebPaylaod (required)
        :type verify_mobile_web_request: VerifyMobileWebRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._verify_new_mobile_otp_using_post_serialize(
            x_token=x_token,
            verify_mobile_web_request=verify_mobile_web_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def verify_new_mobile_otp_using_post_without_preload_content(
        self,
        x_token: Annotated[StrictStr, Field(description="Auth Token")],
        verify_mobile_web_request: Annotated[
            VerifyMobileWebRequest, Field(description="verifyAadhaarOtpWebPaylaod")
        ],
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Verify Mobile OTP to complete new mobile update verification.

        <b>Explanation</b> - Api Accepts <b>New Mobile Number OTP</b> and Verifies it.    <b>Request Body</b> - Required    <b>Responce</b> - Api Accepts <b>New Mobile Number OTP</b> and Verifies it. Returns Error for <b>Unauthorized OTP</b>.

        :param x_token: Auth Token (required)
        :type x_token: str
        :param verify_mobile_web_request: verifyAadhaarOtpWebPaylaod (required)
        :type verify_mobile_web_request: VerifyMobileWebRequest
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._verify_new_mobile_otp_using_post_serialize(
            x_token=x_token,
            verify_mobile_web_request=verify_mobile_web_request,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "TxnResponse",
            "201": None,
            "400": "ApiError",
            "401": None,
            "403": None,
            "404": None,
            "422": "ApiError",
            "500": "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _verify_new_mobile_otp_using_post_serialize(
        self,
        x_token,
        verify_mobile_web_request,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if accept_language is not None:
            _header_params["Accept-Language"] = accept_language
        if x_token is not None:
            _header_params["X-Token"] = x_token
        # process the form parameters
        # process the body parameter
        if verify_mobile_web_request is not None:
            _body_params = verify_mobile_web_request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(["*/*"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["Authorization", "X-HIP-ID"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v2/account/change/mobile/new/verifyOTP",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
