# coding: utf-8

"""
    ABHA Service

    It is important to standardize the process of identification of an individual across healthcare providers, to ensure that the created medical records are issued to the right individual or accessed by a Health Information User through appropriate consent.  In order to issue an ABHA Number to an individual, one only needs basic demographic details like Name, Year of Birth, Gender. In addition, citizens should be able to update contact information easily.  The ABHA Number will be used for the purposes of uniquely identifying persons and authenticating them. An ABHA Address will be used for threading their health records (only with the informed consent of the patient) across multiple systems and stakeholders.   <b>API Security</b>  You need Authorization Token and X-HIP-ID to consume APIs. <b>Notes:</b>  <b>1. In case you want to consume the ABHA APIs and use creation on your own interface, use authentication methods as OTP only. </b> <b>2. In order to have access to ABHA APIs, your clientId must have hid role in gateway. So if you want access to these APIs then please request it in your ABDM on-boarding request.</b> <b>3. In order to have access to Integrated Programs ABHA APIs, your clientId must have integrated_program role in gateway. So if you want access to these APIs then please request it in your ABDM on-boarding request. Also you will need to share integrated program benefit name to be used in this case.</b> <b>4. When calling APIs, please ensure that Authorization header must have format as <i>Bearer {Token_Value}</i>. Please note that prefix Bearer is followed by space before the token value.</b> <b>5. Check the state and district codes from LGD directory [click here](https://lgdirectory.gov.in/)</b>  <b>6. For the APIs </b>  - Sensitive data (Data like OTP, Aadhaar Number, Password, Username etc) have to be encrypted. - Data is encrypted by the public certificate. The certificate can be downloaded from the __/v1/auth/cert__ API under __Authentication__ tag. - RSA Encryption to encrypt the data. Cipher Type - <b>RSA/ECB/PKCS1Padding</b>.  online tool to encrypt data [click here](https://www.devglan.com/online-tools/rsa-encryption-decryption)  <b>

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from abha.models.byte_array_resource import ByteArrayResource

class TestByteArrayResource(unittest.TestCase):
    """ByteArrayResource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ByteArrayResource:
        """Test ByteArrayResource
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ByteArrayResource`
        """
        model = ByteArrayResource()
        if include_optional:
            return ByteArrayResource(
                byte_array = 'YQ==',
                description = '',
                file = abha.models.file.File(
                    absolute = True, 
                    absolute_file = abha.models.file.File(
                        absolute = True, 
                        absolute_path = '', 
                        canonical_file = , 
                        canonical_path = '', 
                        directory = True, 
                        file = True, 
                        free_space = 56, 
                        hidden = True, 
                        name = '', 
                        parent = '', 
                        parent_file = , 
                        path = '', 
                        total_space = 56, 
                        usable_space = 56, ), 
                    absolute_path = '', 
                    canonical_file = , 
                    canonical_path = '', 
                    directory = True, 
                    file = True, 
                    free_space = 56, 
                    hidden = True, 
                    name = '', 
                    parent = '', 
                    parent_file = , 
                    path = '', 
                    total_space = 56, 
                    usable_space = 56, ),
                filename = '',
                input_stream = abha.models.input_stream.InputStream(),
                open = True,
                readable = True,
                uri = abha.models.uri.URI(
                    absolute = True, 
                    authority = '', 
                    fragment = '', 
                    host = '', 
                    opaque = True, 
                    path = '', 
                    port = 56, 
                    query = '', 
                    raw_authority = '', 
                    raw_fragment = '', 
                    raw_path = '', 
                    raw_query = '', 
                    raw_scheme_specific_part = '', 
                    raw_user_info = '', 
                    scheme = '', 
                    scheme_specific_part = '', 
                    user_info = '', ),
                url = abha.models.url.URL(
                    authority = '', 
                    content = abha.models.content.content(), 
                    default_port = 56, 
                    file = '', 
                    host = '', 
                    path = '', 
                    port = 56, 
                    protocol = '', 
                    query = '', 
                    ref = '', 
                    user_info = '', )
            )
        else:
            return ByteArrayResource(
        )
        """

    def testByteArrayResource(self):
        """Test ByteArrayResource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
